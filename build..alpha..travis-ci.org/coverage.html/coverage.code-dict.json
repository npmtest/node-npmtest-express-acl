{"/home/travis/build/npmtest/node-npmtest-express-acl/test.js":"/* istanbul instrument in package npmtest_express_acl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-acl/lib.npmtest_express_acl.js":"/* istanbul instrument in package npmtest_express_acl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_acl = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_acl = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-acl/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-acl && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_acl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_acl\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_acl.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_acl.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_acl.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_acl.__dirname + '/lib.npmtest_express_acl.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-acl/node_modules/express-acl/index.js":"/**\n *  nacl\n *  copyright(c) 2016 - 2019 Thomas Nyambati\n *  MIT Lincensed\n */\n\n(function() {\n  'use strict';\n  module.exports = require('./lib/nacl');\n})();\n","/home/travis/build/npmtest/node-npmtest-express-acl/node_modules/express-acl/lib/nacl.js":"/**\n *  nacl\n *  copyright(c) 2016 - 2019 Andela Kenya Ltd\n *  MIT Lincensed\n */\n\n'use strict';\nlet helper = require('./helpers');\nconst utils = require('./utils');\nconst unless = require('express-unless');\nconst _ = require('lodash');\nlet opt = {};\n\n/**\n * [config Loads the rules from our config file]\n * @param  {[options]} options [defines where the\n * config file is located, and the encoding type]\n *\n */\nfunction config(config, response) {\n  let options = config || {};\n  let yml = options.yml || false;\n  opt.response = response;\n  opt.baseUrl = options.baseUrl;\n\n  if (options.rules) {\n    opt.rules = utils.validate(options.rules);\n    return opt.rules;\n  }\n\n  /**\n   * Get the filename\n   */\n\n  let defaultFilename = yml ? 'nacl.yml' : 'nacl.json';\n  let filename = options.filename ? options.filename : defaultFilename;\n\n  /**\n   * Merge filename and path\n   */\n\n  let path = filename && options.path ?\n    (`${options.path}/${filename}`) : filename;\n\n\n  opt.rules = helper.getRules(path, options.encoding, yml);\n\n  return opt.rules;\n}\n\n/**\n * [authorize Express middleware]\n * @param  {[type]}   req  [Th request object]\n * @param  {[type]}   res  [The response object]\n * @param  {Function} next [description]\n * @return {[type]}        [description]\n */\n\nfunction authorize(req, res, next) {\n  let method = req.method;\n  let resource = helper.resource(next, req.originalUrl, opt.baseUrl);\n  /**\n   * if not resource terminate script\n   */\n\n  if (!resource || !_.isString(resource)) {\n    return;\n  }\n\n  /**\n   * [group description]\n   * @type {[type]}\n   */\n\n  let role = helper.getRole(res, req.decoded, req.session);\n\n  if (!_.isString(role) || !role) {\n    return;\n  }\n\n  /**\n   * get resource from the url\n   */\n\n  let groupPermissions = opt.rules.get(role);\n\n  /**\n   * if no groupPermissions\n   */\n\n  if (!groupPermissions || groupPermissions.length === 0) {\n    return utils.deny(\n      res,\n      404,\n      'REQUIRED: Group not found',\n      null\n    );\n  }\n\n  let policy = groupPermissions[0];\n  let currResource = policy.resource;\n  let length = groupPermissions.length;\n  let methods = policy.methods;\n\n  /**\n   * Globs/ resources\n   */\n  if (length === 1 && currResource === '*') {\n    switch (policy.action) {\n      case 'allow':\n        return utils.whenGlobAndActionAllow(\n          res,\n          next,\n          method,\n          methods,\n          opt.response\n        );\n      default:\n        return utils.whenGlobAndActionDeny(\n          res,\n          next,\n          method,\n          methods,\n          opt.response\n        );\n    }\n  }\n\n  /**\n   * If we have more that one group and we no glob '*'\n   */\n\n  if (length >= 1 && resource !== '*') {\n\n    /**\n     * [methods Get all the methods defined on the group]\n     * @param {[Object]} [group]\n     * @param {string} [resource]\n     * @type {[Array]}\n     */\n\n    let policy = helper.getPolicy(groupPermissions, resource);\n\n    if (!policy) {\n      return utils.deny(\n        res,\n        404,\n        'REQUIRED: Policy not found'\n      );\n    }\n\n    let methods = policy.methods;\n\n    /**\n     * If the methods are defined with a glob \"*\"\n     */\n\n    if (methods && _.isString(methods)) {\n      return utils.whenResourceAndMethodGlob(\n        res,\n        next,\n        policy.action,\n        methods,\n        opt.response\n      );\n    }\n\n    /**\n     * If the methods are defined in an array\n     */\n\n    if (_.isArray(methods)) {\n      return utils.whenIsArrayMethod(\n        res,\n        next,\n        policy.action,\n        method,\n        methods,\n        opt.response\n      );\n    }\n  }\n}\n\n/**\n * Add unless to the authorize middleware.\n * By default express-acl will block all traffic to routes that have no plocy\n * defined against them, this module will enable express-acl to exclude them\n */\n\nauthorize.unless = unless;\n\n/**\n * export the functionality\n *\n */\n\nmodule.exports = {\n  config,\n  authorize\n};\n","/home/travis/build/npmtest/node-npmtest-express-acl/node_modules/express-acl/lib/helpers.js":"'use strict';\nconst fs = require('fs');\nconst utils = require('./utils');\nconst yaml = require('js-yaml');\nconst _ = require('lodash');\n\n/**\n * Get the rules from the specified file path\n * @param {[String]} path\n * @param {[String]} encoding\n * @param {[Boolean]} isYaml\n * @return {[JSON]}\n */\n\nfunction getRules(path, encoding, isYaml) {\n  let rules, buffer;\n\n  try {\n    buffer = fs.readFileSync(path, { encoding });\n    rules = (isYaml) ? yaml.safeLoad(buffer) : JSON.parse(buffer);\n  } catch (error) {\n    throw Error(error);\n  }\n\n  return utils.validate(rules);\n}\n\n\n/**\n * [Gets the methods from the selected group]\n * @param  {[Object]} group\n * @param  {[String]} resource\n * @return {[Array/String]} Returns an array of methods\n * or a string incase a glob is used;\n */\n\nfunction getPolicy(permissions, resource) {\n  let policy = _.find(permissions, {\n    resource: resource\n  });\n\n  if (policy) {\n    return {\n      methods: policy.methods,\n      action: policy.action\n    };\n  }\n  return policy;\n}\n\nfunction getRole(res, decoded, session) {\n\n  /**\n   * if role is attached to the session\n   * Return role\n   */\n\n  if (decoded && decoded.role) {\n    return decoded.role;\n  }\n\n  /**\n   * if role is attached to the decoded\n   * Return role\n   */\n\n  if (session && session.role) {\n    return session.role;\n  }\n\n  /**\n   * if role is not attached to the session or decoed object\n   * Return role\n   */\n\n  return utils.deny(res, 404, 'REQUIRED: Role not found');\n}\n\n\n/**\n * [resource finds the resource based of the baseurl specified]\n * @param  {Function} next    [Express next function]\n * @param  {[String}  url     [Request url]\n * @param  {[String]} baseUrl [The api baseUrl]\n * @return {[String]}           [The matched resource]\n */\n\nfunction resource(next, url, baseUrl) {\n  let base = (baseUrl) ? baseUrl.match(/([A-Z])\\w+/gi) : '';\n  let lengthOfTheBaseUrl = (base) ? base.length : 0;\n  let arr = url.match(/([A-Z])\\w+/gi);\n\n  if (arr) {\n    arr = arr.splice(lengthOfTheBaseUrl);\n    return arr[0];\n  }\n  return next();\n}\n\nmodule.exports = {\n  getRules,\n  getPolicy,\n  getRole,\n  resource\n};\n","/home/travis/build/npmtest/node-npmtest-express-acl/node_modules/express-acl/lib/utils.js":"'use strict';\nconst _ = require('lodash');\nconst assert = require('assert');\n\n/**\n * [deny sends Deny response ]\n * @param  {[Object]} res           [Express response object]\n * @param  {[Number]} status        [Status code]\n * @param  {[String]} customMessage [error your are reporting]\n * @return {[Object]}               [Response message returned to client]\n */\n\nfunction deny(res, status, customMessage, response) {\n  let message = customMessage ? customMessage : 'Unauthorized access';\n\n  if (response && typeof response === 'object') {\n    return res.status(status)\n      .send(response);\n  }\n\n  return res.status(status)\n    .send({\n      status: 'Access denied',\n      success: false,\n      message: message\n    });\n}\n\n/*\n * Allow traffic to all resources\n * 1. Check for methods\n * 2. If its a string and a glob '*'\n * 3. Allow traffic on all methods\n * 4. If methods are defined\n * 5. Allow traffic on the defined methods and deny the rest\n *\n * If the method is a glob '*' grant access\n */\n\nfunction whenGlobAndActionAllow(res, next, method, methods, response) {\n  if (_.isString(methods)) {\n    return next();\n  }\n\n  /**\n   * [if Its an array of  methods]\n   * 1. check if the method is defined\n   * 2. If defined Allow traffic else deny access\n   */\n\n  if (_.isArray(methods)) {\n    let index = methods.indexOf(method);\n\n    switch (index) {\n      case -1:\n        return deny(res, 403, null, response);\n      default:\n        return next();\n    }\n  }\n}\n\n/*\n * Allow traffic to all resources\n * 1. Check for methods\n * 2. If its a string and a glob '*'\n * 3. Allow traffic on all methods\n * 4. If methods are defined\n * 5. Allow traffic on the defined methods and deny the rest\n */\n\nfunction whenGlobAndActionDeny(res, next, method, methods, response) {\n  if (_.isString(methods)) {\n    return deny(res, 403, null, response);\n  }\n\n  if (_.isArray(methods)) {\n    let index = methods.indexOf(method);\n    switch (index) {\n      case -1:\n        return next();\n      default:\n        return deny(res, 403, null, response);\n    }\n  }\n}\n\n/**\n * When a resource is matched\n * And the methods are denoted by glob \"*\"\n */\n\nfunction whenResourceAndMethodGlob(res, next, action, response) {\n  switch (action) {\n    case 'deny':\n      return deny(res, 403, null, response);\n    default:\n      return next();\n  }\n}\n\n/**\n * [whenIsArrayMethod When the methods in policy are an array]\n * @param  {[type]}   res     [Express resposnse object]\n * @param  {Function} next    [Express next function]\n * @param  {[type]}   action  [Policy action]\n * @param  {[type]}   method  [Methid from the request object]\n * @param  {[type]}   methods [Policy methods]\n */\n\nfunction whenIsArrayMethod(res, next, action, method, methods, response) {\n  let boolean = _.includes(methods, method);\n  switch (boolean) {\n    case true:\n      switch (action) {\n        case 'allow':\n          return next();\n        default:\n          return deny(res, 403, null, response);\n      }\n      /* istanbul ignore next */\n      break;\n    case false:\n      switch (action) {\n        case 'allow':\n          return deny(res, 403, null, response);\n        default:\n          return next();\n      }\n  }\n}\n\n/**\n * Ensure that rules has the core properties\n * @param {[JSON]} rules\n • @return {[JSON]}\n*/\n\nfunction assertIsGlobOrArray(term, name) {\n  if (typeof term !== 'string' && !_.isArray(term)) {\n    throw new Error(`TypeError: ${name} should be a array or string`);\n  }\n\n  if (typeof term === 'string' && term !== '*') {\n    throw new Error(\n      `DefinitionError: Unrecognised glob \"${term}\" , use \"*\" instead`\n    );\n  }\n}\n\nfunction checkProperties(rules) {\n  let rulesMap = new Map();\n\n  for (let rule of rules) {\n    assert.equal(typeof rule.group, 'string');\n    assertIsGlobOrArray(rule.permissions, 'Permissions');\n\n    for (let policy of rule.permissions) {\n      assert(typeof policy.resource, 'string');\n      assertIsGlobOrArray(policy.methods, 'Methods');\n\n      if (policy.action !== 'allow' && policy.action !== 'deny') {\n        throw new Error('TypeError: action should be either \"deny\" or \"allow\"');\n      }\n    }\n\n    rulesMap.set(rule.group, rule.permissions);\n\n  }\n\n  return rulesMap;\n}\n\n/**\n * [Checks the validity of the rules]\n * @param  {[JSON]} rules\n * @return {[JSON]}\n */\n\nfunction validate(rules) {\n\n  if (!_.isArray(rules)) {\n    throw new Error('TypeError: Expected Array but got ' + typeof rules);\n  }\n\n  if (rules.length === 0) {\n    return '\\u001b[33mPolicy not set, All traffic will be denied\\u001b[39m';\n  }\n\n  return checkProperties(rules);\n}\n\n\nmodule.exports = {\n  whenIsArrayMethod,\n  whenResourceAndMethodGlob,\n  whenGlobAndActionDeny,\n  whenGlobAndActionAllow,\n  checkProperties,\n  validate,\n  deny\n};\n"}